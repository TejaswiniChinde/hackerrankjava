class Solution {
    public int openLock(String[] deadends, String target) {
        Set<String> deadendsSet = new HashSet<>(Arrays.asList(deadends));
        if (deadendsSet.contains("0000")) return -1; // Check if initial state is a deadend
        
        Queue<String> q = new LinkedList<>();
        q.offer("0000");
        Set<String> visited = new HashSet<>();
        visited.add("0000");
        
        int moves = 0;
        while (!q.isEmpty()) {
            int size = q.size();
            for (int i = 0; i < size; ++i) {
                String current = q.poll();
                
                if (current.equals(target)) return moves; // Target reached
                
                // Generate next possible combinations by rotating each wheel
                for (int j = 0; j < 4; ++j) {
                    for (int k = -1; k <= 1; k += 2) {
                        char[] next = current.toCharArray();
                        next[j] = (char) (((next[j] - '0' + k + 10) % 10) + '0'); // Rotate wheel
                        
                        String nextStr = new String(next);
                        if (!deadendsSet.contains(nextStr) && !visited.contains(nextStr)) {
                            q.offer(nextStr);
                            visited.add(nextStr);
                        }
                    }
                }
            }
            ++moves;
        }
        
        return -1; // Target not reachable
    }
}
